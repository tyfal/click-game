{"ast":null,"code":"var _jsxFileName = \"/Users/tylerfalcoff/Desktop/click-game/click-game/src/components/Board.js\";\nimport React from 'react';\nimport Square from './Square';\n\nclass Board extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      characters: [\"bobbelcher\", \"tinabelcher\", \"louisebelcher\", \"teddy\", \"mort\", \"jimmypestojr\", \"andyandolliepesto\", \"genebelcher\", \"lindabelcher\"],\n      clicked: [],\n      score: 0,\n      highScore: 0\n    };\n\n    this.shuffle = () => {\n      const used = [];\n      const tempCharacters = this.state.characters;\n\n      while (used.length < 9) {\n        let randIndex = Math.floor(Math.random() * 9);\n\n        if (!used.includes(randIndex)) {\n          used.push(randIndex);\n        }\n      }\n\n      this.setState({\n        characters: [tempCharacters[used[0]], tempCharacters[used[1]], tempCharacters[used[2]], tempCharacters[used[3]], tempCharacters[used[4]], tempCharacters[used[5]], tempCharacters[used[6]], tempCharacters[used[7]], tempCharacters[used[8]]]\n      });\n    };\n\n    this.handleClick = event => {\n      const clicked = event.target.getAttribute(\"alt\");\n      const newClicked = this.state.clicked;\n\n      if (!this.state.clicked.includes(clicked)) {\n        newClicked.push(clicked);\n        let newScore = this.state.score + 1;\n        this.setState({\n          clicked: newClicked\n        });\n        this.setState({\n          score: newScore\n        });\n      } else {\n        if (this.state.score > this.state.highScore) {\n          this.setState({\n            highScore: this.state.score\n          });\n        }\n\n        this.setState({\n          score: 0\n        });\n        this.setState({\n          clicked: []\n        });\n      }\n\n      this.shuffle();\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, React.createElement(\"header\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, \"Bob's Burgers Memory Game\"), React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, \"Current Score: \", this.state.score), React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, \"High Score: \", this.state.highScore)), React.createElement(\"div\", {\n      className: \"grid-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, React.createElement(Square, {\n      characters: this.state.characters,\n      handleClick: this.handleClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default Board;","map":{"version":3,"sources":["/Users/tylerfalcoff/Desktop/click-game/click-game/src/components/Board.js"],"names":["React","Square","Board","Component","state","characters","clicked","score","highScore","shuffle","used","tempCharacters","length","randIndex","Math","floor","random","includes","push","setState","handleClick","event","target","getAttribute","newClicked","newScore","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Square from './Square';\n\nclass Board extends React.Component {\n\n    state = {\n        characters: [`bobbelcher`, `tinabelcher`, `louisebelcher`, `teddy`, `mort`, `jimmypestojr`, `andyandolliepesto`, `genebelcher`, `lindabelcher`],\n        clicked: [],\n        score: 0,\n        highScore: 0,\n    }\n\n    shuffle = () => {\n        const used = [];\n        const tempCharacters = this.state.characters;\n        while (used.length < 9) {\n            let randIndex = Math.floor(Math.random() * 9);\n            if (!used.includes(randIndex)) {\n                used.push(randIndex)\n            }\n        }\n        this.setState({\n            characters: [\n                tempCharacters[used[0]]\n                ,tempCharacters[used[1]]\n                ,tempCharacters[used[2]]\n                ,tempCharacters[used[3]]\n                ,tempCharacters[used[4]]\n                ,tempCharacters[used[5]]\n                ,tempCharacters[used[6]]\n                ,tempCharacters[used[7]]\n                ,tempCharacters[used[8]]\n            ]\n        })\n    }\n\n\n    handleClick = event => {\n        const clicked = event.target.getAttribute(`alt`);\n        const newClicked = this.state.clicked;\n        if (!this.state.clicked.includes(clicked)) {\n            newClicked.push(clicked);\n            let newScore = this.state.score + 1;\n            this.setState({clicked: newClicked});\n            this.setState({score: newScore});\n        } else {\n            if (this.state.score > this.state.highScore) {\n                this.setState({ highScore: this.state.score});\n            }\n            this.setState({score: 0});\n            this.setState({clicked: []});\n        }\n        this.shuffle();\n    }\n\n    render() {\n        return (\n            <div>\n                <header>\n                    <h1>Bob's Burgers Memory Game</h1>\n                    <h4>Current Score: {this.state.score}</h4>\n                    <h4>High Score: {this.state.highScore}</h4>\n                </header>\n                <div className=\"grid-container\">\n                    <Square\n                        characters={this.state.characters}\n                        handleClick={this.handleClick}\n                    />\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Board;"]},"metadata":{},"sourceType":"module"}